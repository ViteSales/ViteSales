namespace ViteSales.ERP.SDK.Const;

public enum FieldTypes
{
    AutoNumber,
    Checkbox,
    ReadableId,
    Currency,
    Char,
    Boolean,
    SmallText,
    ShortCode,
    Date,
    DateTime,
    Email,
    File,
    Guid,
    Html,
    Image,
    MultiLine,
    Geography,
    MultiSelect,
    Numeric,
    Password,
    Phone,
    Select,
    Text,
    Url,
    Time,
    Vector,
    Json,
    Jsonb,
    Xml,
    Binary,
    Enum,
    Interval,
    Int4Range,
    Int8Range,
    NumRange,
    TsRange,
    Hstore
}

public static class FieldTypesExtensions
{
    
    public static NpgsqlTypes.NpgsqlDbType GetPostgresDbType(this FieldTypes fieldType)
    {
        return fieldType switch
        {
            FieldTypes.AutoNumber => NpgsqlTypes.NpgsqlDbType.Integer,
            FieldTypes.Boolean => NpgsqlTypes.NpgsqlDbType.Boolean,
            FieldTypes.Checkbox => NpgsqlTypes.NpgsqlDbType.Boolean,
            FieldTypes.Currency => NpgsqlTypes.NpgsqlDbType.Numeric,
            FieldTypes.Date => NpgsqlTypes.NpgsqlDbType.Date,
            FieldTypes.DateTime => NpgsqlTypes.NpgsqlDbType.Timestamp,
            FieldTypes.Char => NpgsqlTypes.NpgsqlDbType.Varchar,
            FieldTypes.ReadableId => NpgsqlTypes.NpgsqlDbType.Varchar,
            FieldTypes.Email => NpgsqlTypes.NpgsqlDbType.Varchar,
            FieldTypes.File => NpgsqlTypes.NpgsqlDbType.Bytea,
            FieldTypes.Guid => NpgsqlTypes.NpgsqlDbType.Uuid,
            FieldTypes.Html => NpgsqlTypes.NpgsqlDbType.Text,
            FieldTypes.Image => NpgsqlTypes.NpgsqlDbType.Bytea,
            FieldTypes.MultiLine => NpgsqlTypes.NpgsqlDbType.Text,
            FieldTypes.Geography => NpgsqlTypes.NpgsqlDbType.Geography,
            FieldTypes.MultiSelect => NpgsqlTypes.NpgsqlDbType.Array,
            FieldTypes.Numeric => NpgsqlTypes.NpgsqlDbType.Numeric,
            FieldTypes.Password => NpgsqlTypes.NpgsqlDbType.Text,
            FieldTypes.Phone => NpgsqlTypes.NpgsqlDbType.Varchar,
            FieldTypes.Select => NpgsqlTypes.NpgsqlDbType.Varchar,
            FieldTypes.Text => NpgsqlTypes.NpgsqlDbType.Text,
            FieldTypes.Url => NpgsqlTypes.NpgsqlDbType.Varchar,
            FieldTypes.Time => NpgsqlTypes.NpgsqlDbType.Time,
            FieldTypes.Vector => NpgsqlTypes.NpgsqlDbType.Array,
            FieldTypes.Json => NpgsqlTypes.NpgsqlDbType.Json,
            FieldTypes.Jsonb => NpgsqlTypes.NpgsqlDbType.Jsonb,
            FieldTypes.Xml => NpgsqlTypes.NpgsqlDbType.Xml,
            FieldTypes.Binary => NpgsqlTypes.NpgsqlDbType.Bytea,
            FieldTypes.Enum => NpgsqlTypes.NpgsqlDbType.Varchar,
            FieldTypes.Interval => NpgsqlTypes.NpgsqlDbType.Interval,
            FieldTypes.Int4Range => NpgsqlTypes.NpgsqlDbType.IntegerRange,
            FieldTypes.Int8Range => NpgsqlTypes.NpgsqlDbType.IntegerRange,
            FieldTypes.NumRange => NpgsqlTypes.NpgsqlDbType.NumericRange,
            FieldTypes.TsRange => NpgsqlTypes.NpgsqlDbType.TimestampRange,
            FieldTypes.Hstore => NpgsqlTypes.NpgsqlDbType.Hstore,
            FieldTypes.SmallText => NpgsqlTypes.NpgsqlDbType.Varchar,
            FieldTypes.ShortCode => NpgsqlTypes.NpgsqlDbType.Varchar,
            _ => throw new ArgumentOutOfRangeException(nameof(fieldType), 
                fieldType, "Unsupported FieldType")
        };
    }
    
    public static string GetPostgresColumnType(this FieldTypes fieldType)
    {
        return fieldType switch
        {
            FieldTypes.AutoNumber => "SERIAL",
            FieldTypes.Boolean => "BOOLEAN",
            FieldTypes.Checkbox => "BOOLEAN",
            FieldTypes.Currency => "DECIMAL(19,6)", 
            FieldTypes.Date => "DATE",
            FieldTypes.DateTime => "TIMESTAMP",
            FieldTypes.Char => "VARCHAR(2)",
            FieldTypes.ReadableId => "VARCHAR(40)", 
            FieldTypes.Email => "VARCHAR(255)", 
            FieldTypes.File => "BYTEA", 
            FieldTypes.Guid => "UUID",
            FieldTypes.Html => "TEXT",
            FieldTypes.Image => "BYTEA", 
            FieldTypes.MultiLine => "TEXT",
            FieldTypes.Geography => "GEOGRAPHY", 
            FieldTypes.MultiSelect => "TEXT[]", 
            FieldTypes.Numeric => "NUMERIC", 
            FieldTypes.Password => "TEXT", 
            FieldTypes.Phone => "VARCHAR(20)", 
            FieldTypes.Select => "VARCHAR(255)", 
            FieldTypes.Text => "TEXT",
            FieldTypes.Url => "VARCHAR(2048)", 
            FieldTypes.Time => "TIME",
            FieldTypes.Vector => "FLOAT[]",
            FieldTypes.Json => "JSON",
            FieldTypes.Jsonb => "JSONB",
            FieldTypes.Xml => "XML",
            FieldTypes.Binary => "BYTEA",
            FieldTypes.Enum => "VARCHAR(255)", 
            FieldTypes.Interval => "INTERVAL",
            FieldTypes.Int4Range => "INT4RANGE",
            FieldTypes.Int8Range => "INT8RANGE",
            FieldTypes.NumRange => "NUMRANGE",
            FieldTypes.TsRange => "TSRANGE",
            FieldTypes.Hstore => "HSTORE",
            FieldTypes.SmallText => "VARCHAR(80)",
            FieldTypes.ShortCode => "VARCHAR(80)",
            _ => throw new ArgumentOutOfRangeException(nameof(fieldType), fieldType, "Unsupported FieldType")
        };
    }
}
